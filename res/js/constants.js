var CHARACTER_JUMP_LENGTH = 2;
var FLOOD_SLEEP_TIME = 40;
var OUT_WINDOW_PREFIX = "out_window_";
var PROMPT_BLINK_INTERVAL = 100;
var FLOOD_JUMP_LENGTH = [-1,36,-1];

var COMMANDS_ARRAY = [
"for f in *.jar; do if jar -tf $f | grep -q javax.servlet; then echo $f; fi; done",
"dd if=/dev/zero of=/fs/to/fill/dummy00 bs=8192 count=$(df --block-size=8192 / | awk 'NR!=1 {print $4-100}')",
"nc <ip> <port> -vnc -zw2 www.example.com 80 && echo openlsof -i :22nmap -p 80 hostnameif (nc -zw2 www.example.com 80); then echo open; fifuser -n tcp -s <port> && echo \"+open\"",
"jda() { cd $(pwd | sed \"s/\\(\\/$@\\/\\).*/\\1/g\"); }upto() { cd \"${PWD/\\/$@\\/*//$@}\" }jd() { cd **/\"$@\"; }",
"fdupes -R -1 path | while read -r line; do (echo $line | xargs -n 1 | (first=\"true\"; firstfile=\"\"; while read file; do if [ \"$first\" == \"true\" ]; then first=\"false\"; firstfile=$file; else ln --force \"$firstfile\" \"$file\"; fi; done)); done",
"emerge -av1 $(for e in `qlist -I --nocolor | uniq`; do for f in `qlist -e $e`; do if test ! -e $f; then echo $e; echo $e: missing $f 1>&2; fi; done; done)emerge -av1 `qlist --installed --nocolor | uniq | while read cp; do qlist --exact $cp | while read file; do test -e $file || { echo $cp; echo \"$cp: missing $file (and maybe more)\" 1>&2; break; }; done; done`",
"removedir(){ read -p \"Delete the current directory $PWD ? \" human;if [ \"$human\" = \"yes\" ]; then [ -z \"${PWD##*/}\" ] && { echo \"$PWD not set\" >&2;return 1;}; rm -Rf ../\"${PWD##*/}\"/ && cd ..; else echo \"I'm watching you\" | pv -qL 10; fi; }",
"find . -maxdepth 1 -iname '*jpg' -exec convert -quality 60 {} lowQ/{} \\;",
"emerge -av1 `qlist --installed --nocolor | uniq | while read cp; do qlist --exact $cp | while read file; do test -e $file || { echo $cp; echo \"$cp: missing $file (and maybe more)\" 1>&2; break; }; done; done`emerge -av1 $(for e in `qlist -I --nocolor | uniq`; do for f in `qlist -e $e`; do if test ! -e $f; then echo $e; echo $e: missing $f 1>&2; fi; done; done)",
"mkdir save && for f in *.mp3; do lame -b xxx \"$f\" ./save/\"${f%.mp3}.mp3\"; done",
"termtrace(){( strace -s 1000 -e write tput $@ 2>&2 2>&1 ) | grep -o '\"[^\"]*\"';}",
"START=20; END=50 echo $(($START+(`od -An -N2 -i /dev/random`)%($END-$START+1)))",
"curl --basic --user username:password --data status=\"Twitter from commandline with curl\" https://twitter.com/statuses/update.xml",
"silent(){ $@ > /dev/null 2>&1; }; alias shh=silent",
"SOURCE: dd if=/dev/sda bs=16065b | netcat ip-target 1234 TARGET: netcat -l -p 1234 | dd of=/dev/mapper/laptop bs=16065b STATS on target: watch -n60 -- kill -USR1 $(pgrep dd)",
"find . | shuf -n1shuf -n1 -e *ls -1 | shuf -n 1a=(*); echo ${a[$((RANDOM % ${#a[@]}))]}for i in *; do echo \"$i\"; done | shuf -n1ls -1 | awk 'BEGIN{srand()} {x[NR] = $0} END{print \"Selected\", x[1 + int(rand() * NR)]}'",
"git config --global --add alias.ff \"pull --no-commit -v\" ; git ff",
"for db in $(mysql -e 'show databases' -s --skip-column-names); do mysqldump $db | gzip > \"/backups/mysqldump-$(hostname)-$db-$(date +%Y-%m-%d-%H.%M.%S).gz\"; donefor I in $(mysql -e 'show databases' -s --skip-column-names); do mysqldump $I | gzip > \"$I.sql.gz\"; donefor I in `echo \"show databases;\" | mysql | grep -v Database`; do    mysqldump $I > \"$I.sql\"; donemysql -e 'show databases' | sed -n '2,$p' | xargs -I DB 'mysqldump DB > DB.sql'while read; do mysqldump $REPLY | gzip > \"/backup/mysql/$REPLY.sql.gz\"; done < <( mysql -e 'show databases' -s --skip-column-names )",
"cd /etc/network/if-up.d && iptables-save > firewall.conf && echo -e '#!/bin/sh -e\\niptables-restore < $(dirname $0)/firewall.conf' > iptables && chmod a+x iptablesiptables-save > firewall.conf; rm -f /etc/network/if-up.d/iptables; echo '#!/bin/sh' > /etc/network/if-up.d/iptables; echo \"iptables-restore < firewall.conf\" >> /etc/network/if-up.d/iptables; chmod +x /etc/network/if-up.d/iptables",
"echo \"${PATH//:/$'\\n'}\"echo $PATH | tr \\: \\n( IFS=:; for p in $PATH; do echo $p; done )echo -e ${PATH//:/\\n}echo src::${PATH} | awk 'BEGIN{pwd=ENVIRON[\"PWD\"];RS=\":\";FS=\"\\n\"}!$1{$1=pwd}$1!~/^\\//{$1=pwd\"/\"$1}{print $1}'print -l $path",
"say='festival --tts'; S=$(date +%s); echo $(echo $S | cut -b 1-1)\" billion\" | $say ; echo $(echo $S | cut -b 2-4 | sed 's/0*//')\" million\"| $say; echo $(echo $S | cut -b 5-7 | sed 's/0*//')\" thousand\"| $say",
"xv() { case $- in *[xv]*) set +xv;; *) set -xv ;; esac }function setx(){ sed '/[xv]/!Q2' <<< $- && { set +xv; export PS4=\">>> \"; } || { export PS4=\"`tput setaf 3`>>> `tput sgr0`\"; set -xv; }; }",
"history -c && rm -f ~/.bash_historyhistory -cecho \"\" > .bash_history",
"tar --exclude=\".??*\" -zcvf ./home_backup_2008.tar.gz  my_home",
"scp /home/svnlabs.txt root@92.178.0.56:/home/scp -P 22 /home/svnlabs.txt  root@92.178.0.56:/home/svnlabs.txt",
"ifconfig eth1 | grep inet\\ addr | awk '{print $2}' | cut -d: -f2 | sed s/^/eth1:\\ /g",
"curl -u yourusername:yourpassword -d status=?Your Message Here? https://twitter.com/statuses/update.xml",
"composite -geometry 96x96+250+70 foreground.jpg background.jpg image.jpg",
"find . -name .DS_Store -exec rm {} \\;",
"ssh user@<source_host> -- tar cz <path> | ssh user@<destination_host> -- tar vxzC <path>ssh root@host1 \"cd /somedir/tocopy/ && tar -cf - .\" | ssh root@host2 \"cd /samedir/tocopyto/ && tar -xf -\"",
"<ctrl+p> for previous command; <ctrl+n> for next command",
"ffmpeg -f alsa -r 16000 -i hw:2,0 -f video4linux2 -s 800x600 -i /dev/video0 -r 30 -f avi -vcodec mpeg4 -vtag xvid -sameq -acodec libmp3lame -ab 96k output.avi",
"'ls -1 *<pattern>* | while read file; do scp $file user@host:/path/; if [[ $? -eq 0 ]]; then rm $file; fi; done'",
"In MySQL client, \\P less -Smysql --pager=\"less -niSFX\"",
"find . \\( -iname '*.cpp' -o -iname '*.h' \\) -exec wc -l {} \\; | sort -n | cut --delimiter=.  -f 1 | awk '{s+=$1} END {print s}'",
"wget -q -O - `youtube-dl -b -g $url`| ffmpeg -i - -f mp3 -vn -acodec libmp3lame -| mpg123  -url=\"$my_url\";file=$(youtube-dl -s -e $url);wget -q -O - `youtube-dl -b -g $url`| ffmpeg -i - -f mp3 -vn -acodec libmp3lame - > \"$file.mp3\"",
"yes | pv | ssh $host \"cat > /dev/null\"pv /dev/zero|ssh $host 'cat > /dev/null'",
"ssh user@remotehost [anycommand](i.e uptime,w)",
"watch() { while true; do echo \"<Ctrl+V><Ctrl+L>Every 2.0s: $@\"; date; eval \"$@\"; sleep 2; done }",
"find /DirectoryWhereMyMp3sAre/ -regextype posix-egrep -iregex '.*?\\.(ogg|mp3)' | sort > ~/mylist.m3uls -w 1 > list.m3ufind /DirectoryWhereMyMp3sAre/ -name *.mp3 | grep \"andy\" > ~/mylist",
"svn log -v -r{2009-11-1}:HEAD | awk '/^r[0-9]+ / {user=$3} /./{if (user==\"george\") {print}}' | grep -E \"^   M|^   G|^   A|^   D|^   C|^   U\" | awk '{print $2}' | sort | uniqsvn log -v -r{2009-05-21}:HEAD | awk '/^r[0-9]+ / {user=$3} /yms_web/ {if (user==\"george\") {print $2}}' | sort | uniq",
"O=$IFS;IFS=$'\\n'; D=$(for f in *;do  [[ -d $f ]] && du -sh \"$f\";done | sort -gr);F=$(for f in *;do [[ -f $f ]] && du -sh \"$f\";done | sort -gr);IFS=$O;echo \"$D\";echo \"$F\"ncduls -shF --color",
"echo \"<?php phpinfo(); ?>\" | php > phpinfo.txtphp -iphp -r \"phpinfo();\"",
"wajig largedpkg-query -Wf '${Installed-Size}\\t${Package}\\n' | sort -ndpigsdpkg --get-selections | cut -f1 | while read pkg; do dpkg -L $pkg | xargs -I'{}' bash -c 'if [ ! -d \"{}\" ]; then echo \"{}\"; fi' | tr '\\n' '\\000' | du -c --files0-from - | tail -1 | sed \"s/total/$pkg/\"; donesed -ne '/^Package: \\(.*\\)/{s//\\1/;h;};/^Installed-Size:  \\(.*\\)/{s//\\1/;G;s/\\n/ /;p;}' /var/lib/dpkg/status | sort -rnawk '{if ($1 ~ /Package/) p = $2; if ($1 ~ /Installed/) printf(\"%9d %s\\n\", $2, p)}'  /var/lib/dpkg/status | sort -n | tail",
"diff -U99999 original.css modified.css  | awk '/^-/{next} {f=f\"\\n\"$0} /^\\+.*[^ ]/{yes=1} /}/ {if(yes){print f} f=\"\";yes=0}'",
"find . -name \\*.php -exec php -l \"{}\" \\;",
"sed -n 's/.*<title>\\(.*\\)<\\/title>.*/\\1/ip;T;q' file.htmlawk 'BEGIN{IGNORECASE=1;FS=\"<title>|</title>\";RS=EOF} {print $2}' file.htmltr -d \"\\n\r\" | grep -ioEm1 \"<title[^>]*>[^<]*</title\" | cut -f2 -d\\> | cut -f1 -d\\<awk 'BEGIN{IGNORECASE=1;FS=\"<title>|</title>\";RS=EOF} {print $2}' | sed '/^$/d' > file.html",
"ls *.jpg | awk -F'.' '{ printf \"%s %04d.%s\\n\", $0, $1, $2; }' | xargs -n2 mvrename 's/\\d+/sprintf(\"%04d\",$&)/e' *.jpgfor i in $(seq -w 0 100) ; do mv prefix$(( 10#$i )).jpg prefix${i}.jpg ; done",
"find . -regex \".*\\.[cChH]\\(pp\\)?\" -print | etags -",
"awk '/sshd/ && /Failed/ {gsub(/invalid user/,\"\"); printf \"%-12s %-16s %s-%s-%s\\n\", $9, $11, $1, $2, $3}' /var/log/auth.log",
"tweet(){ curl -u \"$1\" -d status=\"$2\" \"http://twitter.com/statuses/update.xml\"; }curl -u user:pass -d status=\"Tweeting from the shell\" http://twitter.com/statuses/update.xmlcurl -u user -d status=\"Tweeting from the shell\" http://twitter.com/statuses/update.xmlcurl -u twitter-username -d status=\"Hello World, Twitter!\" -d source=\"cURL\" http://twitter.com/statuses/update.xmltweet () { curl -u UserName -d status=\"$*\" http://twitter.com/statuses/update.xml; }curl -u YourUsername:YourPassword -d status=\"Your status message go here\" http://twitter.com/statuses/update.xml",
"ln -nvfs /source /destinationln -nsf <TARGET> <LINK>",
"git-createrepo() { repos_path='/srv/git/'; mkdir $repos_path$1; cd $repos_path$1;   git init --bare;   echo \"Repository location: ssh://$USER@`cat /etc/HOSTNAME``pwd`\"; cd -; }",
"echo \"12345,12346\" |sed -e's/ //'|tr \",\" \"\\n\"| while read line; do  echo -n $line\" \"; svn log -vr $line https://url/to/svn/repository/|grep \"/\"|head -1|cut -d\"/\" -f2; done",
"echo 1 > /proc/sys/kernel/sysrq; echo b > /proc/sysrq-trigger",
"git show --relative --pretty=format:'' --name-only HASH",
"pdftk in.pdf cat 1S output out.pdf",
"echo $(($(seq -s* 10)))seq -s* 10 |bcecho $(( $(echo 1 \"* \"{2..10}) ))seq 10 | paste -sd* | bcdc -e '10 [q]sq[dd1=q1-lxx*]dsxxp'",
"dig -x 74.125.45.100sed 's/\\([0-9]*\\)\\.\\([0-9]*\\)\\.\\([0-9]*\\)\\.\\([0-9]*\\).in-addr.arpa domain name pointer\\(.*\\)\\./\\4.\\3.\\2.\\1\\5/' \\ lookups.txt",
"cat /sys/block/{*,*/*}/holders/dm*/dm/name | awk -F- '{print $1}' | sort -u",
"tmux attach || tmux newalias ltmux=\"if tmux has; then tmux attach; else tmux new; fi\"if tmux has; then tmux attach -d; else tmux new; fi",
"cat my.sandbox.cnf | awk -F \"=\" 'NF < 2 {print} sub(\"=\", \"=~placeholder~=\") {print}' | awk -F \"=~placeholder~=\" 'NF < 2 {gsub(\"-\", \"_\", $0); print} NF==2 {gsub(\"-\", \"_\", $1); print $1 \"=\" $2}'",
"echo $(shuf -n4 /usr/share/dict/words)echo $(grep \"^[^'A-Z]\\{3,\\}\" /usr/share/dict/words|shuf -n4)",
"# aptitude purge ~cdpkg --list | grep '^rc\\b' | awk '{ print $2 }' | xargs sudo dpkg -Paptitude purge ~captitude purge ~c",
"MyVAR=85 awk '{ print ENVIRON[\"MyVAR\"] }'MyVAR=86; awk -v n=$MyVAR '{print n}'VAR=\"foo\" ; awk '{ print '\"$VAR\"' }'MyVAR=84; awk '{ print \"'\"$MyVAR\"'\" }'",
"uptime | cut -d \",\" -f 1 | cut -d \" \" -f 4-",
"tar dfz horde-webmail-1.2.3.tar.gz",
"wget -r --wait=5 --quota=5000m --tries=3 --directory-prefix=/home/erin/Documents/erins_webpages  --limit-rate=20k  --level=1 -k -p -erobots=off -np -N  --exclude-domains=del.icio.us,doubleclick.net -F -i ./delicious-20090629.htm",
"svn status | grep '^?' | sed -e 's/^? */svn add \"/g' -e 's/$/\"/g'|sh ; svn status | grep '^!' | sed -e 's/^! */svn delete \"/g' -e 's/$/\"/g'|sh",
"for i in $(netstat --inet -n|grep ESTA|awk '{print $5}'|cut -d: -f1);do geoiplookup $i;done",
"cat foo.json | python -mjson.tool",
"Server side: while true; do tar cvzf - ./* | nc -l 2000; done, client side: nc localhost 2000 | tar xvzf -",
"pktsize=1516;for i in $( seq $pktsize -8 1450 ) ; do ping -M do -s $i -c 1 slashdot.org; done",
"lsof -i tcp:22 | grep 192.168.10.10 | awk \"{print $2}\" |xargs kill",
"ls -1 | awk ' { print \"zip \"$1\".zip \" $1 } ' | sh",
"find . -type f -print0 | xargs -0 du -h | sort -hr | head -20find . -mount -type f -printf \"%k %p\\n\" | sort -rg | cut -d \\  -f 2- | xargs -I {} du -sh {} | less",
"dd if=/dev/zero of=10gb bs=1M count=10240",
"ls -a | sed \"s#^#${PWD}/#\"printf \"$PWD/%s\\n\" *ls -d $PWD/*ls -d1 $PWD/{.*,*}find $(pwd) -maxdepth 1 -name \"*\" -printf \"%p\\n\"find `pwd` -maxdepth 1 -exec ls --color -d {} \\;",
"echo 16i `echo \"F\" | tr '[a-f]' '[A-F]'` p | dc ; echo 16o \"15\" p | dc",
"/bin/rpm -qf /etc/passwd /etc/issue /etc/httpd/conf/httpd.conf",
"find -amin +[n] -deletetouch -t \"YYYYMMDDhhmm.ss\" ~/.ts ; find . -newer ~/.tstouch -t \"YYYYMMDDhhmm.ss\" dummy ; find . -anewer dummyfind <dir> -printf '%p : %A@\\n' | awk '{FS=\" : \" ; if($2 < <time in epoc> ) print $1 ;}' | xargs rm --verbose -fr ;",
"pgrep rouge-process | xargs sudo kill -9killall -9 rouge-process",
"find . -type d | while read dir ; do num=`ls -l $dir | grep '^-' | wc -l` ; echo \"$num $dir\" ; done | sort -rnk1 | head",
"for i in be bg cz de es fi fr hu it lv lu at pl pt ro sk si  ; do echo -n \"$i \" ; wget -q -O - http://www.expansys.$i/d.aspx?i=196165 | grep price | sed \"s/.*<p id='price'><strong>&euro; \\([0-9]*[,.][0-9]*\\).*/\\1/g\"; done",
"du -kd | egrep -v \"/.*/\" | sort -nalias dush=\"du -sm *|sort -n|tail\"du -cks * | sort -rn | while read size fname; do for unit in k M G T P E Z Y; do if [ $size -lt 1024 ]; then echo -e \"${size}${unit}\\t${fname}\"; break; fi; size=$((size/1024)); done; donedu -hs *|grep M|sort -nalias dush=\"du -xsm * | sort -n | awk '{ printf(\"%4s MB  ./\",\\$1) ; for (i=1;i<=NF;i++) { if (i>1) printf(\"%s \",\\$i) } ; printf(\"\\n\") }' | tail\"",
"perl -wlne 'print $1 if /(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5]))/' iplistecho 254.003.032.3 | grep -P '^((25[0-4]|2[0-4]\\d|[01]?[\\d]?[1-9])\\.){3}(25[0-4]|2[0-4]\\d|[01]?[\\d]?[1-9])$'echo 127.0.0.1 | egrep -e '^(([01]?[0-9]{1,2}|2[0-4][0-9]|25[0-4])\\.){3}([01]?[0-9]{1,2}|2[0-4][0-9]|25[0-4])$'echo \"123.32.12.134\" | grep -P '([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])'",
"sed 's+href=\"\\([^\"]*\\)\"+\\n\\1\\n+g' bookmarks.html | grep '^http' |clive",
"<commmand>; if [[ \"$?\" = 0 ]]; then echo ':)'; else echo ':('; fi",
"cd() { if [ -n \"$1\" ]; then [ -f \"$1\" ] && set -- \"${1%/*}\"; else [ -n \"$CDDIR\" ] && set -- \"$CDDIR\"; fi; command cd \"$@\"; }",
"mysqldump --lock-tables --opt DBNAME -u UNAME --password=PASS | gzip > OUTFILEmysqldump -u UNAME -p DBNAME > FILENAME",
"s3cmd ls s3://bucket.example.com | s3cmd del `awk '{print $4}'`",
"find /path/to/dir  -type f -printf \"%T@|%p\\n\" 2>/dev/null | sort -n | tail -n 1| awk -F\\| '{print $2}'newest () { find ${1:-\\.} -type f |xargs ls -lrt ; }newest () { candidate=''; for i in \"$@\"; do [[ -f $i ]] || continue;  [[ -z $candidate || $i -nt $candidate ]] && candidate=\"$i\"; done; echo \"$candidate\"; }newest () { DIR=${1:-'.'};  CANDIDATE=`find $DIR -type f|head -n1`; while [[ ! -z $CANDIDATE ]]; do BEST=$CANDIDATE; CANDIDATE=`find $DIR -newer \"$BEST\" -type f|head -n1`; done; echo \"$BEST\"; }",
"ps -eo stat,pid,user,command | egrep \"^STAT|^D|^R\"",
"mplayer -vo null -vc null -ao pcm:fast:file=file.wav file.mp3; faac -b 128 -c 44100 -w file.wav",
"du -s $(ls -l | grep '^d' | awk '{print $9}') | sort -nr",
"ssh user@host.com \"DISPLAY=:0.0 import -window root png:-\" | open -a /Applications/Preview.app -f",
"find . -type f -printf \"%h\\n\" | cut -d/ -f-2 | sort | uniq -c | sort -rnps -ef | grep pmon",
"echo -e \"aa\\nbb\\ncc\\ndd\\n123\" | sed -e :a -e \"/$/N; s/\\n/;/; ta\"cat file | tr \"\\n\" \" \"tr \"\\n\" \" \" < fileperl -pe 'eof()||s/\\n/<SOMETEXT>/g' file.txtawk 'BEGIN{RS=\"\\0\"}{gsub(/\\n/,\"<SOMETEXT>\");print}' file.txtcat file | tr -d \"\\n\"",
"ls /home | head -64 | barcode -t 4x16 | lpr",
"wmic -U DOMAIN/user --password='password'  //IP_HOST \"select Caption,CSDVersion,CSName  from Win32_OperatingSystem\" | grep Windows",
"cowsay $(fortune)fortune | cowsayfortune | cowsay -f tux",
"traceroute 2>/dev/null -n google.com | awk '/^ *1/{print $2;exit}'sudo arp-scan 192.168.1.0/24 -interface eth0",
"for i in $(multipath -ll | grep \"3PARdata,VV\"|awk '{print $1}') ; do parted -a optimal /dev/mapper/$i --script -- mklabel gpt mkpart primary 1 -1 set 1 lvm on ; done",
"import -pause 5 -window root desktop_screenshot.jpg",
"false; while [ $? != 0 ]; do apg -c /dev/urandom -n1 -E oOlL10 | egrep '^[[:alnum:]]+$'; done",
"find /path/folder -type f -name \"*.*\" -print -exec rm -v {} + | wc -l;",
"sshfs name@server:/path/to/folder /path/to/mount/point",
"cat $(ls -tr | tail -1) | awk '{ a[$1] += 1; } END { for(i in a) printf(\"%d, %s\\n\", a[i], i ); }' | sort -n  | tail -25",
"sudo mount -t cifs -o user,username=\"samba username\" //$ip_or_host/$sharename /mntsudo mount -t cifs //$ip_or_host/$sharename /mntsudo mount -t cifs -o credentials=/path/to/credenials //hostname/sharename /mount/point",
"fc-list | cut -d ':' -f 1 | sort -u",
"find -regextype posix-egrep -regex \".*/[A-Z]{3}_201009[0-9]{2}.*\" -printf \"%f %s\\n\" | awk '{ SUM += $2;COUNT++ } END { print SUM/1024 \" kb in \" COUNT \" files\" }'",
"rsync -e \"/usr/bin/ssh -p22\" -a --progress --stats --delete -l -z -v -r -p /root/files/ user@remote_server:/root/files/",
"aptitude search -F \"%p\" --disable-columns ~iperl -m'AptPkg::Cache' -le '$c=AptPkg::Cache->new; for (keys %$c){ push @a, $_ if $c->{$_}->{'CurrentState'} eq 'Installed';} print for sort @a;'dpkg --get-selections | awk '$2==\"install\" {print $1}' | sort",
"(sp-sc sop://broker.sopcast.com:3912/6002 3900 8900 &>/dev/null &); sleep 10; mplayer http://localhost:8900/tv.asf(sp-sc sop://broker.sopcast.com:3912/80562 8908 10999 &>/dev/null &); sleep 10; wait $(vlc http://localhost:10999); killall sp-sc",
"seg() { echo -e \"$1\" | while read LINE; do for b in $(seq 10); do echo $LINE.$b; done; done; }",
"for i in `seq 1 1 50`; do  echo -n -; donepython -c 'print \"-\"*50'seq -s\" \" -50 -1 | tr -dc -perl -le'print\"-\"x50'ruby -e 'puts \"-\" * 50'awk 'BEGIN{while (a++<50) s=s \"-\"; print s}'",
"cut -d: -f1 /etc/passwd | sortcut -d: -f1 /etc/passwd | sortawk -F ':' '{print $1 | \"sort\";}' /etc/passwdgetent passwd | cut -d: -f1 | sort",
"watch -n 2 -d '/sbin/ifconfig eth0'",
"find -print0 | xargs -0 -n 1 -P 4 -I {} sh -c \"zcat '{}' | mysql nix\"",
"vim -p `ls *.java *.xml *.txt *.bnd 2>/dev/null`",
"gnome-terminal --tab --tab --tab",
"cvs -Q status | perl -ne 'print if m/^File.+Status: (?!Up-to-date)/ .. m/^=/;'cvs -Q status | grep -i locallycvs -n update 2>null | grep -i \"M \" | sed s/\"M \"//cvs up 2>&1 | grep --color 'U \\|P \\|A \\|R \\|M \\|C \\|? 'cvs -q diff --brief | grep file | cut -d/ -f3- | cut -d',' -f1",
"alias histdel='history -d $((HISTCMD-2)) && history -d $((HISTCMD-1))'",
"mount -t msdos /dev/fd0 /mnt/floppy",
"find $SDIR -name '${f}.*' -mtime +$n -maxdepth 1 | xargs -n 10 rm -vf",
"echo \"The date is: $(date +%D)\"",
"ls \"~/Music/iTunes/iTunes Media/Mobile Applications\" > filepathls \"`defaults read com.apple.itunes NSNavLastRootDirectory`/iTunes/iTunes Music/Mobile Applications/\" > filepathcd \"~/Music/iTunes/iTunes Media/Mobile Applications\";ls > filepath",
"plink -v -ssh -N -D 8580 -l USERNAME -pw PASSWARD 192.168.2.12",
"tar -c directory_to_compress/ | pbzip2 -vc > myfile.tar.bz2",
"echo \"test\" | sed 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'",
"for i in {a..z} ; do  man -k $i |grep -i \"^$i\" |wc | awk 'BEGIN { OFS = \":\"; ORS = \"\" }{print  $1, \"\\t\"}' && echo $i  ;done",
"grep --exclude-dir=.svn --exclude=*~ -i \"TODO\" -rl .find . -iname '*TODO*'",
"find ./ -size +10M -type f -print0 | xargs -0 ls -Ssh1 --color",
"XZ_OPT=-9 tar cJf tarfile.tar.xz directory",
"complete -W \"$(echo $(grep '^ssh ' .bash_history | sort -u | sed 's/^ssh //'))\" sshcomplete -W \"$(echo `cat ~/.ssh/known_hosts | cut -f 1 -d ' ' | sed -e s/,.*//g | uniq | grep -v \"\\[\"`;)\" sshperl -ne 'print \"$1 \" if /^Host (.+)$/' ~/.ssh/configcomplete -W \"$(sed 's/;.*//;' /etc/hosts | awk ' /^[[:digit:]]/ {$1 = \"\";print tolower($0)}')\" sshcomplete -W \"$(while IFS=' ,' read host t; do echo $host; done < ~/.ssh/known_hosts)\" sshcomplete -W \"$(echo `cat ~/.ssh/known_hosts | cut -f 1 -d ' ' | sed -e s/,.*//g | uniq | grep -v \"\\[\"`;)\" ssh",
"find . -name '*.java' -o -name '*.xml' | grep -v '\\.svn' | xargs wc -l",
"perl -pi -e 's/:([\\w\\d_]+)(\\s*)=>/\\1:/g' **/*.rb",
"i=$((15*60)); while [ $i -gt 0 ]; do clear; echo $i | figlet; sleep 1; i=$(($i-1)); done;watch -tn1 'date +%r | figlet'",
"v=/dev/vg0/lv0; lvextend -L+200G $v && resize2fs $v",
"find . -type f -name *.MP3 -print0 | xargs -0 -i rename .MP3 .mp3 {}",
"wget -r --no-parent http://codeigniter.com/user_guide/ ; mv codeigniter.com/user_guide/* . ; rm -rf codeigniter.comsvn co http://svn.ellislab.com/CodeIgniter/trunk/user_guide",
"echo /home/foo/dir1/bar |  awk -F/ -v OFS=/ '{$3 = \"dir2\"}1'",
"while true; do curl -s http://sensiblepassword.com/?harder=1 | tail -n 15 | head -n 1 | sed 's;<br/>;;' | cut -c 5- | cb; sleep 1; done",
"mount /dev/root /mnt/root; rsync -avHX /mnt/root/ /mnt/target/rsync -aHux --exclude=/proc/* --exclude=/sys/* /* /mnt/target/cp -dpRx /* /mnt/target/",
"find . -type f|perl -lne '@x=sort {$b->[0]<=>$a->[0]}[(stat($_))[7],$_],@x;splice(@x,11);print \"@{$x[0]}\";END{for(@x){print \"@$_\"}'find . -type f -printf '%20s %p\\n' | sort -n | cut -b22- | tr '\\n' '\\000' | xargs -0 ls -laSr",
"firefox 'data:text/html, <html contenteditable>'",
"mkfs.vfat /dev/sdc1mkdosfs /dev/sdx1",
"(pv -n ~/database.sql | mysql -u root -pPASSWORD -D database_name) 2>&1 | zenity --width 550 --progress --auto-close --auto-kill --title \"Importing into MySQL\" --text \"Importing into the database\"",
"rpm -qf /etc/*-releasecat /etc/issuecat /etc/*releaselsb_release -alsb_release -atest `uname` = Linux && lsb_release -a || ( test `uname` = SunOS && cat /etc/release || uname -rms )",
"tar -jcvf /folder/file.tar.bz2 --same-owner --same-permissions /folder/",
"ldapsearch -LLL  -H ldap://${HOST}:389 -b 'DC=${DOMAIN},DC=${TLD}' -D '${USER}' -w 'password' objectclass=* -E pr=2147483647/noprompt",
"curl -s http://geoiplookup.wikimedia.org/ | python3 -c 'import sys, json, string, webbrowser; webbrowser.open(string.Template(\"http://maps.google.com/maps?q=$lat,$lon\").substitute(json.loads(sys.stdin.read().split(\"=\")[-1])))'curl -s http://geoiplookup.wikimedia.org/|awk -F, '{print $3,$4}'|awk -F'\"' '{print \"http://maps.google.com/maps?q=\"$4 \",\" $8}'",
"file -i * | grep -c 'text/plain'file -i * | grep 'text/plain' | wc -l",
"sed 's/^M$//' input.txt > output.txtdos2unix <file>tr -d '\\r' < <input> > <output>fromdos <file>",
"script -qf | tee >(nc -kl 5000) >(nc -kl 5001) >(nc -kl 5002)bash -i 2>&1 | tee /dev/stderr | nc -l 5000script -qf >(nc -ub 192.168.1.255 5000)script -qf | tee >(nc -l -p 5000)",
"watch 'ls -tr1 | tail -n1 | xargs tail'",
"echo 'Host or User@Host?:'; read newserver && ssh-keygen -N \"\" -t rsa -f ~/.ssh/id_rsa ; ssh $newserver cat <~/.ssh/id_rsa.pub \">>\" ~/.ssh/authorized_keys ; ssh $newserver"
];

var FLOOD_TEXT = [
"ユーザーは、本サービスを利用することにより、本規約に同意することになります。以下を注意してお読みください。<br/>本サービスは多岐にわたるため、追加規定または特定の製品についての条件（年齢制限を含みます）が適用されることがあります。追加規定は、関連する本サービスと共に入手可能であり、ユーザーがその対象となる本サービスを利用した場合に、その追加規定は Google とユーザーの間の契約の一部となります。<br/>本サービスのご利用<br/>本サービス内で入手できるすべてのポリシーを遵守してください。<br/>本サービスを不正に利用しないでください。たとえば、本サービスの妨害や、Google が提供するインターフェースおよび手順以外の方法による本サービスへのアクセスを試みてはなりません。ユーザーは、法律（輸出、再輸出に関して適用される法規制を含みます）で認められている場合に限り、本サービスを利用することができます。ユーザーが Google の規約やポリシーを遵守しない場合、または Google が不正行為と疑う行為について調査を行う場合に、Google はユーザーに対する本サービスの提供を一時停止または停止することができます。<br/>ユーザーは、本サービスを利用することによって、本サービスまたはアクセスするコンテンツに対するいかなる知的財産権も取得することはありません。ユーザーは、本サービスのコンテンツの所有者から許可を得た場合や、法律によって認められる場合を除き、そのコンテンツを利用することはできません。本規約は、本サービスで使用されている、いかなるブランドまたはロゴを利用する権利もユーザーに与えるものではありません。本サービス内に表示される、または、本サービスに伴って表示されるいかなる法的通知も、削除したり、隠したり、改ざんしてはなりません。<br/>本サービスで表示されるコンテンツの一部は、Google の所有物ではありません。こうしたコンテンツについては、そのコンテンツを提供する当事者が単独で責任を負います。Google は、コンテンツが違法か否か、または Google のポリシーに違反しているか否かを判断するために、コンテンツをレビューすることができます。さらに、Google は、そのポリシーまたは法律に違反していると合理的に判断したコンテンツを削除したり、その表示を拒否することができます。ただし、このことは、Google がコンテンツをレビューしていることを必ずしも意味するものではありません。Google がコンテンツをレビューしていると想定しないでください。<br/>本サービスの利用に関して、Google はユーザーに対してサービスの告知、管理上のメッセージ、およびその他の情報を送信することができます。ユーザーは、これらの通知について、受け取らないことを選択できる場合があります。<br/>ユーザーの Google アカウント<br/>本サービスを利用するために、Google アカウントが必要になる場合があります。Google アカウントは、ユーザー自身が作成するか、管理者（ユーザーの雇用主、所属教育機関など）によって割り当てられます。管理者によって割り当てられた Google アカウントを利用する場合には、本規約とは異なるまたは追加の規定が適用されることがあります。また、管理者はユーザー アカウントにアクセスできたり、アカウントを削除できることがあります。<br/>ユーザーのパスワードまたはアカウントが不正に利用されていることに気付いた場合には、こちらに記載の手順に従ってください。<br/>プライバシーおよび著作権の保護<br/>Google のプライバシー ポリシーでは、本サービスの利用におけるユーザーの個人データの取り扱いとプライバシーの保護について記載しています。ユーザーは、本サービスを利用することにより、Google のプライバシー ポリシーに従って、Google がユーザーの個人データを利用できることに同意することになります。<br/>Google は、米国デジタル ミレニアム著作権法に規定される手続きに従い、著作権侵害の申し立ての通知に対応し、常習侵害者のアカウントを削除します。<br/>Google は、著作権者がオンライン上で知的財産権を管理することを支援するための情報を提供します。ご自身の著作権が侵害されていると考え、Google に通知することを希望する場合には、通知の提出および通知への対応に関する Google のポリシーについての情報を Google のヘルプセンターで入手することができます。<br/>本サービス内のユーザーのコンテンツ<br/>本サービスの一部では、ユーザーがコンテンツを提供することができます。ユーザーは、そのコンテンツに対して保有する知的財産権を引き続き保持します。つまり、ユーザーのものは、そのままユーザーが所有します。<br/>本サービスにユーザーがコンテンツをアップロードまたはその他の方法により提供すると、ユーザーは Google（および Google と協働する第三者）に対して、そのコンテンツについて、使用、ホスト、保存、複製、変更、派生物の作成（たとえば、Google が行う翻訳、変換、または、ユーザーのコンテンツが本サービスにおいてよりよく機能するような変更により生じる派生物などの作成）、（公衆）送信、出版、公演、上映、（公開）表示、および配布を行うための全世界的なライセンスを付与することになります。このライセンスでユーザーが付与する権利は、本サービスの運営、プロモーション、改善、および、新しいサービスの開発に目的が限定されます。このライセンスは、ユーザーが本サービス（たとえば、ユーザーが Google マップに追加したビジネス リスティング）の利用を停止した場合でも、有効に存続するものとします。本サービスの一部では、ユーザーがそのサービスに提供したコンテンツにアクセスし、それを削除する方法が提供されることがあります。さらに本サービスの一部には、そのサービスに提供されたコンテンツの Google による利用範囲を狭める規定または設定があります。本サービスに提供するコンテンツについて、このライセンスを Google に付与するのに必要な権利を保有していることを必ずご確認ください。<br/>Google のプライバシー ポリシーまたは特定の本サービスについての追加規定において、どのように Google がコンテンツを利用および保存するかに関し、さらに情報を入手できます。本サービスに関するフィードバックまたは提案をユーザーが送信した場合、Google は、ユーザーに対する義務を負うことなく、そのフィードバックまたは提案を利用することができます。<br/>本サービス内のソフトウェアについて<br/>本サービスがダウンロード可能なソフトウェアを必要とする、または含んでいる場合、新バージョンまたは新機能が入手可能になると、そのソフトウェアはユーザーの端末上で自動的に更新されることがあります。本サービスの一部では、自動更新の設定をユーザーが変更することができます。<br/>Google は、本サービスの一環としてユーザーに提供するソフトウェアについて、全世界で適用され、譲渡不可で、非独占的な個人使用ライセンスを無償でユーザーに付与します。このライセンスは、Google が提供する本サービスを本規約により許可された方法でユーザーが使用し、その便益を享受できるようにすることを唯一の目的としています。ユーザーは、本サービスまたは本サービスに含まれるソフトウェアのどの部分も、複製、変更、配信、販売、貸与することはできず、そのソフトウェアのソース コードのリバース エンジニアリングや抽出を試みることはできません。ただし、法律によってこの制限が禁止されている場合、またはユーザーが Google から書面による許可を得た場合は、この限りではありません。<br/>オープンソース ソフトウェアは Google にとって重要です。本サービスで使用されているソフトウェアの一部は、Google が提供するオープンソース ライセンスに基づいて提供されている場合があります。このオープンソース ライセンスには、本規約の一部の規定に優先することを明示した条項が含まれていることがあります。<br/>本サービスの変更または終了<br/>Google は、常に本サービスの変更および改善を行っています。Google は、機能性や機能の追加や削除を行うことができ、本サービス全体を一時停止または終了することができます。<br/>ユーザーはいつでも本サービスの利用を終了することができます。Google もいつでも、ユーザーに対する本サービスの提供を停止し、または、本サービスに対する制限を追加または新規に設定することができます。<br/>Google は、ユーザーが自身のデータを所有し、そのデータにユーザーが常にアクセスできるようにすることが重要であると考えています。Google が本サービスを中断する場合、合理的に可能なときには、Google はユーザーに対して、合理的な事前の通知を行い、ユーザーが本サービスから情報を取得する機会を提供します。<br/>保証および免責<br/>Google は、商業上合理的な水準の技術および注意のもとに本サービスを提供し、ユーザーに本サービスの利用を楽しんでいただくことを望んでいますが、本サービスについて約束できないことがあります。<br/>本規約または追加規定に明示的に規定されている場合を除き、Google またはそのサプライヤーもしくはディストリビューターのいずれも、本サービスについて具体的な保証を行いません。たとえば Google は、本サービス内のコンテンツ、本サービスの特定の機能、その信頼性、利用可能性、またはユーザーのニーズに応える能力について、何らの約束もしません。本サービスは「現状有姿で」提供されます。<br/>一部の法域においては、商品性、特定の目的への適合性、および権利の侵害がないことに関する黙示保証などの保証が認められることがあります。法律で許されている範囲内で、Google はすべての保証を排除します。<br/>本サービスに対する責任<br/>法律で認められる場合には、Google ならびにそのサプライヤーおよびディストリビューターは、逸失利益、逸失売上もしくはデータの紛失、金銭的損失、または間接損害、特別損害、結果損害もしくは懲罰的損害について責任を負いません。<br/>法律で許されている範囲内で、黙示保証を含む、本規約が適用されるいかなる請求についても、Google ならびにそのサプライヤーおよびディストリビューターが負う責任の総額は、ユーザーが本サービスを利用するために Google に対して支払った金額を上限とし、または、Google が選択した場合には、再度ユーザーに対して本サービスを提供することに限定されるものとします。<br/>いかなる場合においても、Google ならびにそのサプライヤーおよびディストリビューターは、合理的に予測することができない損失または損害については、何らの責任も負いません。<br/>事業者による本サービスの利用<br/>本サービスを事業者のために利用する場合、その事業者は本規約に同意するものとします。かかる事業者は、Google とその関連会社、役員、代理店、従業員を、本サービスの利用または本規約への違反に関連または起因するあらゆる請求申し立て、訴訟、法的措置について、請求申し立て、損失、損害、訴訟、裁判、告訴から生じる法的責任および費用、弁護士費用を含め、免責および補償するものとします。<br/>本規約について<br/>Google は、たとえば、法律の改正または本サービスの変更を反映するために、本サービスに適用する本規約または特定の本サービスについての追加規定を修正することがあります。ユーザーは定期的に本規約をご確認ください。Google は、本規約の修正に関する通知をこのページに表示します。追加規定の修正については、該当する本サービス内において通知を表示します。変更は、さかのぼって適用されることはなく、その変更が表示されてから 14 日以降に発効します。ただし、本サービスの新機能に対処する変更または法律上の理由に基づく変更は、直ちに発効するものとします。本サービスに関する修正された規定に同意しないユーザーは、本サービスの利用を停止してください。<br/>本規約と追加規定との間に矛盾が存在する場合には、追加規定が本規約に優先します。<br/>本規約は、Google とユーザーとの間の関係を規定するものです。本規約は、第三者の受益権を創設するものではありません。<br/>ユーザーが本規約を遵守しない場合に、Google が直ちに法的措置を講じないことがあったとしても、そのことによって、Google が有している権利（たとえば、将来において、法的措置を講じる権利）を放棄しようとしていることを意味するものではありません。<br/>ある特定の規定が強制執行不可能であることが判明した場合であっても、そのことは他のいずれの規定にも影響を及ぼすものではありません。<br/>カリフォルニア州の抵触法を除き、本規約または本サービスに起因するまたは関連するいかなる紛争に関しても、アメリカ合衆国カリフォルニア州の法律が適用されます。本規約または本サービスに起因するまたは関連するいかなる主張についても、アメリカ合衆国カリフォルニア州サンタクララ郡内に所在する裁判所においてのみ裁判手続を取ることができるものとし、ユーザーと Google はその裁判所の対人管轄権に同意するものとします。<br/>Google との連絡方法に関する情報についてはお問い合わせページをご覧ください。",
"c7e51acbbb1cfde f40e34f8f05ee5f<br/>cdb59f861a13ed6 3befcfdd43b5779<br/>b38e9ebffd89ff4 e590f693b4e5eb3<br/>4248d6fad38edf9 e13d5621d4e0eed<br/>9be238e0f314400 4948b045c739c18<br/>10c7ae6490df543 ce7701253af89f4<br/>0a254127bf9ef54 edb011fc45d3b6e<br/>c2d35327b803b92 d90c5b93bcdf7e4<br/>512d00b896e9e2c 46999eef0fd12ad<br/>485310b55899d34 b88a0ed5294727c<br/>741d1c941321ea6 bec488c14740b17<br/>a6edd906be1bb7c 7d600efc4b9295a<br/>eacacd4b64b4414 91c0f2b965f87be<br/>51a35ddec5ac2bd 7330441bfd103f2<br/>799a687f83028c5 45eb4fa62f803d4<br/>200a696b299ac5d 6e870295b981aeb<br/>23520cef623e038 63f4bd600f2c28a<br/>cbed0813dd0f1dd 199b58b8f251ee2<br/>9a2aab440e2e0fd 3073711f58c856f<br/>eacad1510685897 53d693ae781dad6<br/>88c9703a0bd6625 bb7af77e643abd5<br/>9fc3ec905522ad4 983750bc3901975<br/>73e293d3ba7de4e 3833ed3e00837b3<br/>92cf3951b24ba2f c07f669ff933a91<br/>6c757c0095e6ebf e4fd5f5d2dceffe<br/>a12c2490d31b6ef 5dfce0a4dd1189d<br/>88008af8cc5094a 98193764a1ada57<br/>3885f2b9a25db05 4e0fdf00db9c40f<br/>955f54f8716fcf6 fca8ef69ede0c7c<br/>5123f2776f9354e b058cbfad32090e<br/>9aef61e0ce929fa 71ee7fcd9dd0b66<br/>deaa97210aeaecd c6f7f2f2b862eb3<br/>c73fec1eb8820c5 d7e5c1521a5380e<br/>1be213d42a46fa2 f458b55542aa3be<br/>5c9f934964d1577 530be5791259b29<br/>26b39df6ee72972 cddc2c56c2ba3ba<br/>bcdd81d5414ee5a 600bbdc6b072c98<br/>db46a5b2ff90fe4 8d4926e36031c76<br/>1651763ae40ddf2 08aa82cdfedd636<br/>d11111592eb8183 ec9d11db0343f56<br/>eef6e657c931d30 c17c5a008acc0cd<br/>0228884987ef5eb 4c49945ccf4b8e1<br/>fd3f3d80b418b87 32d8c6b686243f6<br/>a4e109c6588f54d 76cdad1b34a59cc<br/>5af97cd5f844fa8 6616cc080cd541d<br/>8190f0c79a2db77 13624e5eaabef2c<br/>99bece59abfb1ab 15a015854b28d4e<br/>4517f02a517a693 65e2d8e79b9e670<br/>93ac2a8358fa121 8c8beca121c4fb2<br/>acce98f8f247325 a36e55b0db3b483<br/>a9bc3cf20f9c1d9 b3ec44858f6defe<br/>22eb6dd6653a1d6 ddcc0ab5c2e2683<br/>4a50ab8fa07c47b 52cdad3fd47cf5a<br/>81e7dd11b7d2a95 aa1b3dab6fec431<br/>f642c80658b946d dc649ab4912b207<br/>bdcc689ebddbfb0 5f65fcb428bf18f<br/>8cf13d6a0c13eb7 cfdf3aba51a34d4<br/>31a58e8efd95dfd 8f9195bd7c36842<br/>37944e4314188cc bfbc41c5b0d59bf<br/>d0e93f361241ff8 fa206bae07f2202<br/>07e4097ec15094c 71513415979b374<br/>0130c618d068321 bf9d5f9c9c25c4c<br/>8f1b3e1cebf6a77 835ebf9c2c50c9c<br/>b26abde466ecf30 514e4fd1b593ae9<br/>0bfb28a517c6ace 28ff6c4b5fb0f34<br/>1169c758f1c5c9a 135b817b46fc691<br/>8a6bdda15e8bc64 1d5fc764fad1aaf<br/>8f6c4c28fb3e746 d6bcdff50d10610<br/>0de90afa24f2bb8 200ef01a2feab1f<br/>59837029b2f8b5e 3cc97c8ae733621<br/>f6cf0eb0c107610 d1eb78a278c402d<br/>6ca411179b5236d 4a3c907fd268437<br/>b47c53f6cec6b98 be69fe51ece721e<br/>44921be0775a4bf 1cca0c1959b5111<br/>df00f30b2d566aa d18cc16c634e7b4<br/>69caff8884d0556 11559fe7180bd2c<br/>59172e6fb7f809f 79a9a67a23fbaf1<br/>9357b342c5f055f 62712084e0216e4<br/>91f33ddc757f8d2 09737bc3b9ecdc9<br/>7c744166afe775d d33926b0adac731<br/>eb0492f074da818 ebb1f0fdcf06f97<br/>5c4e17dd00da2e0 b68f41ddfbc00d9<br/>0e6ddea838718e5 14948408a59d22f<br/>7d668f8b3963717 4ad5ce4784944e3<br/>ce58e37f99e30c7 d3d3ea9baea8f53<br/>92c16ba47f5371c a9b80cbd7189cf4<br/>e54fb46fa73d903 33a56d47be599b8<br/>0a3930edb1b79f6 ac96f5f4b5add78<br/>3850e2606bbaf38 7f8787f83631b29<br/>858e9584cadf176 0a362d9eddc033d<br/>0133b3696a04605 4f6cc58d6a33c3e<br/>ddeff262b486ee7 30632fde621d0ab<br/>a8b832a0324be79 14183c7d629fcb2<br/>a03ac3f2bdbd852 957e7307362ba4f<br/>7b3b7d1544b8269 2eb99422bba7841<br/>168fe39383d2e96 cf607f17da2ae4d<br/>b9d5e75bc914de2 372d9df5613622f<br/>c5461007568de79 289e5f34a622152<br/>8c8a4d62311a175 c8e28133f76f3e8<br/>dbf919e56b2c0a9 60b6f02e2d192a5<br/>66af9e04741da78 dc777c73c42f84d<br/>c284a8e7f421a88 8e49ab3507b8571<br/>9ade36d500646d0 7ceaaf78be7f07e<br/>57c61eb6f4432d6 268714c951aff91<br/>d3e6402041b4241 1755b442cdd4b89<br/>a96e16d5aaf394b a4e4d95b1367f92<br/>4bd9fb02ed42125 9eaa5b3cc722110<br/>cab8ed2f202278e 25a1039247f7229<br/>47c8cd6d81beff6 d67ee88197d9287<br/>92f10a885224560 2999939920de2a2<br/>c6060fb0a209db5 95f2c0efedcfe50<br/>111668c8da7e817 12fd1f73dac3c7f<br/>1625d5a6374b921 1508a1a5a53d672<br/>8af3ac00c67d6c2 fc7d0c033cc12f7<br/>1cb2c39fc2530fd f12e79336beba6b<br/>ce3052cc7c3f6c3 d00c16e3e481483<br/>63a48c352f392ad 20a5d1620c231cc<br/>2eb2bc3a130c77f d18951d34c42977<br/>10ba38a88f2cfdf ce234a6854b0751<br/>e36c522f3da8d72 648e8afa389e3ca<br/>0657728e9bce33e 7a7961dcea5234d<br/>af6f605553644ed 3f27e37481c5c68<br/>3fea3a9c0021d80 98ee86768046a9a<br/>54a1a92a7e3435a d60e47fb44ccffd<br/>b8f5f0ef4a21b34 039aa8789525f4a<br/>1d737a8752b3b17 7e07905f4668f43<br/>a89faa3a59a477e b3bcea7022af294<br/>af9090bbd2da6c5 121508c6832a8b4<br/>53c78938535e037 ec89282bb39e6e4<br/>fd20610ce845e5f 43474ae6ee11949<br/>783e703344892d8 454bdda95649e17<br/>e9a85da4845320b 45bc69e2d9e4fc6<br/>d16a6b3b0250e36 e8d87f13c3f4f58<br/>f79d8faf80cc7a0 22eda3d5e156370<br/>2ecb715116b4cf6 cf9b1cde9ca63b5<br/>a69f46651cbfa04 ef5905fdd9f8265<br/>5dae3dac1603b58 a7462f887a6038d<br/>05907b674466b07 a6c1255eff90a01<br/>09f5018c3aa00db f26172d57471bb5<br/>3a791909e82daaa 60284d18f3275d8<br/>55cd34cfa9f4da4 bd7b0c1d543d364<br/>411fb63a2ea13f0 ce4cba6e6d869b3<br/>1bcb528cf0084fe b7bc046f93cd3c0<br/>bbc2b1c25640455 84d4e8274da002c<br/>7fa136efba1c8a1 657413649345ce6<br/>990e79a45e46f30 35bf822e3facbf0<br/>1b414e847f35543 daac1a68e47da36<br/>9fec5b78d76ee1b 946cf8ab4196ede<br/>9de501b749c5317 5eb57867eb504b6<br/>a94f7c419337812 a763c66c1c67cd2<br/>a34de5fb40eb5c9 ef0c6b55714a597<br/>0df15ea0d1a6e98 47f771d6b066684<br/>6f4674c33bf511a 2f4ce5246e8bc1a<br/>8bdc11756795028 6ff410d071bce66<br/>6e55009720c8cba 793495c7be4170c<br/>fb8d2b767953031 adf49900a5975a1<br/>63fd584b96d3abc 35cf76d0b12ca90<br/>3ac41b2c715d7b8 f236be13730ea2a<br/>bbe5aa1ecb6fc35 ee240c323c7b16c<br/>22c41e5d8edb6e0 1092f195f61fa03<br/>0fed3e5b4e927ef 609f311a2dd973a<br/>4956904f5bdeb82 b851cfc62bcd7d4<br/>5e49bbfa61aee78 7739590e5b690de<br/>fa79023964602a7 4c48c2fdf14fc3c<br/>d09774e98ff3cc6 7212d0dd9b8e86e<br/>8683e7749d35492 18f4c9a294a624b<br/>253e34f0b843d93 6fe82056bb772bf<br/>3403349e809b699 e13b32e06a2ad52<br/>b0ffcc354e1cfb9 3b1030dca19ccdf<br/>02f128e04eaaa00 1f74d5e7834ee17<br/>05d11ef16efc94b a24e9c19faf7a29<br/>ddcdd597a13c677 c7679e3343b6126<br/>7ac7c1c37ad9247 dad1cb02a8f36e0<br/>2c7213907ff6647 44ae1fde4ce9d86<br/>503c202ead1db77 fe4da6656c4ea8f<br/>908f3af5e8cf7e9 9fdd86750179ee7<br/>6e308378fd68ea0 d435cf9de6edf63<br/>cbbcf64d0e31c77 ca8013eab8403e6<br/>604984f42cd7e82 9b56ac5663d2a2b<br/>94543ecb6612aee 51776c21454f9d2<br/>ce322abf382837d 57dd7f7a1248ae8<br/>9474576cf02c1cb 4dd557b2a96f92f<br/>35402838d170b30 56a243a92e3ba4d<br/>d4061eb472a82c2 b588df17ac79841<br/>a0800ec0ec5a40c 87562f349812305<br/>a7da922f7ffba71 034ae45781f33be<br/>8067390a5d1d63b 65cb566104d2006<br/>7756ce412b17eef f7be9f98f10fc52<br/>01cfa00f155ae1c c6457deefa8dba1<br/>e4f2209c2bf6aed 9f405a6679a2b39<br/>00a5430cf838b57 76fee252f2c6ddc<br/>5626a4275f41b7a e75d05c1d79fadf<br/>3a626ce798ff059 7c290b46d9bf5f7<br/>b67fb7e18d31754 8d3303b30afcae0<br/>828277c35e95927 5da8ab29bda28a7<br/>81709f67e8d8ae5 b269ff89985e92a<br/>49d72bd2c024517 fce2b65d64a9e2e<br/>059b0e4abc43626 2f6095760e02f38<br/>9d2c98fc9690b00 902ce6a4e71fede<br/>4825dd513d22dff c6bfa7e7d74862c<br/>6bc2c2c1d61d6d7 9cabb388519d90e<br/>1e75e4cb5ed5da5 efa086c05749487<br/>ad1bab281f2aa40 236c4b14941ff37<br/>2fd46dd484fb31d d65bb1ddd33119d<br/>2df5e76f7c667ec 3854104aa9ec6d6<br/>1ea67b8e1eb6294 a6285997d0f2b4c<br/>2447c9a97fa07bb 883acb7b94ecb96<br/>259af42a557a1e9 3ecb5423968cba1<br/>a859cd1a748f3a2 db8dec3df5cd040<br/>109cf1603917218 51a3ecfe0a067bf<br/>3305aa32fb6acc4 7cdc7b0376a3d2c<br/>6e206f39fa9cdc6 18a84e96a700f0f<br/>4eb034d4b36459f 1c7f3b6dd669b4e<br/>fac097a473989a9 6a5f37fec685c70<br/>7406071e657d457 eea3994a1a47ab1<br/>10d09ee0118a3c3 e980b4696d87959<br/>9b9f23a8e127eba 1c25d3086c6bf0c<br/>2454ee01b6de923 4e5d9698df3af76<br/>42ea8e215f1ae19 a9a4a08b530b742<br/>579d4de94cc922d 4ebcaeae91b090c<br/>3d909e26499adab ca91933bb47f0c8<br/>d331db5c5b7ff18 c5d289f34fdb79e<br/>9e02134853bd716 2105c1aee2040d5<br/>7805c0e65508b0c 5c3c67283cdc293<br/>8f75d073f0e5a6d 44596163ad62cd1<br/>9c0dacb9eeba414 5347fc89f44b0a4<br/>e953d97215fb5b0 f6e8ee8eb3d813a<br/>6b74fced84c662b 64e36d86a465b75<br/>844c583e17442b6 ecb5753b1bb47e3<br/>6f094b274da66a7 c6f68f808eb5c72<br/>7695a0332895777 c8cd5e3f4470fca<br/>e06b5e8151cef22 cdc771be11c6fe2<br/>2b522a25141b9e2 ad9913ddbcaf936<br/>9ae58862dfd026e 70e915c1a7c98d8<br/>064e3e30f66fca3 8f4ca3e47d2b50a<br/>250342f18b85027 a70673d467ff270<br/>09d407099689d73 ecf3428f9218bc0<br/>1db9ad41176cdf9 8f20deffc58b015<br/>35af29bc3af093b e62362603cde95e<br/>2bad9ffc63945e2 134d4edbcc76732<br/>adb12b54a8aa540 8fcdf16c1d5685a<br/>f62557a7167118c ad2460b223d5fdd<br/>5fd2a3fe25131d5 997594335687c73<br/>ef9f3e265c64e7e 01cdf7a1198b178<br/>4d253db2c7ce131 88abf2d97e71908<br/>bd8640b6e84c300 917814dbe8646c1<br/>0d8f9f501411b9e 8bf37f4041df126<br/>36101583b0d0f8a a26c09a12689021<br/>e94d1ecf4098ac6 5f8924c78016ce9<br/>1f1d671c9cb27d8 be04f3d05dc94fd<br/>f8434c3c202d2d6 7a71d026c7e7ce3<br/>26800aa05836fee 432132dff730e86<br/>164d17c5fe2c18e 42ee44be7bca62b<br/>5ee17cb1dfb23bf 00cff44463c2fce<br/>964f710e896e936 870af6040b94a04<br/>2bfda769f368e09 ffcdbb0fc3efd62<br/>47ce5291878af91 7c5517180286ec6<br/>ab37451026c9f70 4f048b285d1d163<br/>34f580b7d6e3d69 d9a204541c97aed<br/>946783effa2ea90 a60e85fcea3b816<br/>e9a8fac62022df6 7e4a7cfaf370b33<br/>b955fbc6d4e4c06 733f6c6285344ae<br/>a580ca470f7b310 f89bfb1e124b2e9<br/>a8157b484b819ab 7af9c005a81834d<br/>2e600399db6001d 6143cea9f306402<br/>a017202773dc3ae 61c9fb33609a82b<br/>6e4220d72677bab 408465207ff4755<br/>d138c5665c99bef f8f1c907b56133d<br/>c4507b0ed2b5789 264f0b6b3b222a5<br/>13d72bb857f5be5 2f24be64db7c1ec<br/>46f218edf347c32 44da52cda7e4988<br/>33f492fcf4bc663 291375b829c7a08<br/>5dde21648becc73 b76e89f36a69fdb<br/>dc48fc3d2cfa40b e3f73f61c5ea187<br/>2aad74e24a72d34 d98c96da247263a<br/>81b06736330dcb1 f32ac1c8cc2484e<br/>7efdd2430ede12a af8ed783ac02e00<br/>9cc9d731b32654c 70f73d08409adc4<br/>7e0c96bdea73d65 f73727189aff767<br/>f175c8c3450b69a 988a8b77021896b<br/>3004ba78853939c ced64161bdf15d4<br/>4e2f18e64c1815e c8614e47bcb9e7a<br/>35b00c3c2d13e3e ccc8da692de1fd0<br/>dc47db94890254d 95d7ab061582b74<br/>e92ac2d1fc8dc42 824b40aadfcf1c7<br/>28ecd53241c096a ef740350f60e5c6<br/>31e45f3f4ac4ac3 930ea14c3b7f0da<br/>edaae9e90aed26b f8357ee411befd1<br/>6f5605494c42593 ce20ed1da2888e7<br/>d05c99dd11d8fd6 fe6d6ff5b2078ed<br/>9b884d4049c82d4 2185dbe6e692b42<br/>aadf1a54c93c5fa fa5fd397e2c0e49<br/>cacf84c15e82cd1 525e685f2a5be0b<br/>3ed6b6c95b6e5fe edc076840169aa9<br/>a3d04873419a3ac a353fbc0409d76e<br/>00887c689ab35c5 b38c00bc9d9e635<br/>a4dc7ba944ff05c 9221efc83fce53d<br/>2a62bebd8270ef3 015c69e58bc9c27<br/>3a5065ab8f60687 0ce380d5de83e24<br/>10c3439d24b486e 82f5d85b7c7a50b<br/>01bccf8475cea2e 54783a667a92d14<br/>8a52104bd01d6e3 7d4aa36be240981<br/>d25c0726841eeaf 47b40850fa72706<br/>76351d0503ee1ac 9316307ebe4ee69<br/>c0bd1c4a655bc3a 1026a01a975e8fc<br/>00d3964861b7acd 9c2dd70ed7a9128<br/>bf3a4b1bac91a93 d5defa049321bc5<br/>6c86c6abdae44a7 56457504c6f5ba4<br/>bd5fc1f25d702bf cc90b6b36634ebc<br/>bdfc841df11e2e8 3d1eb2d313c711f<br/>afd93394179f599 5f870801b8728a4<br/>780b7802f46e957 47a6133c023111e<br/>13031ec900be7cc 44c5337d668340f<br/>d11875d7c1e611b caff9c34e371dd3<br/>be56fafebee7d01 b8ef5401d069584<br/>c2c91a5bd77009f 91360f69ae63620<br/>cadc15c2febca80 5cf994427c9f484<br/>fb6300364ed0191 2d51fe4c9d484dd<br/>fa0de412e27d9a2 2d93c2ef02fd9e0<br/>a27d130e2ccf092 6fa1c30e2c1b15f<br/>40ebc27e1b11144 9187c5a37b64de3<br/>361fecef3764c70 e1ed094fb8de888<br/>aa01169ecdac92a 9f1ce0fb711fdc0<br/>54b9082e14410f8 a323959d0fa4a09<br/>e8d08571e2bf9e9 62717c9d8195ed7<br/>5a495de5f3ed891 c23ff841c5e3deb<br/>f0112aacfb092b0 6fb823692827d0b<br/>06abc08e0df3adc 734a756355335d2<br/>b74099cb90967d7 593bafe6f584722<br/>8ba3895bad48ff2 b9998d3728eff3b<br/>3a1fc1badbe2a56 d7a10d5e75f8043<br/>080c7ecaab93de5 9eba31fb8cdeabc<br/>2ea8d1b7c3d2791 955ac56028b4279<br/>b0fad1cdae5d9e9 dc4cda982d88275<br/>0a847363df074eb 1ea3f9376a37163<br/>af6cd165d7cfe9d 3a5227409ef37f0<br/>35d6076e23df9fe 246ef2e6c1faa27<br/>fc153848968ba9c afaecb29ac8033b<br/>f05802f3cf4add9 2b69ba5d3a99c97<br/>a28569eb30f9697 065af0c2bfbb154<br/>b4677a9aa5208a2 9065b58e1a81367<br/>273f9417f8eba21 f5b47baba6ce1cd<br/>67556dc673f8d7e 478d90e9b577347<br/>d1566cf6c46f9bf a7fd34615282cf2<br/>7d289b819963a3a c7105ebcaed8fc5<br/>01c28b5da17dc09 2e1464c245980d5<br/>962a552bae298ec 64ab7f04a7f49b4<br/>4b589d845e07a0b e24631870758fd0<br/>f3f2b9c646ab397 54a67d6d0b68cc2<br/>22c2808f6a371f2 c22561cad6c48fa<br/>e48035530656dfb 5accd6d1635bcbc<br/>c8c31b438d18528 dc619103382a93b<br/>f85124e17149c00 35a9ca3bf99e334<br/>a5f260a4f2fd20c bd8d52ab597cfbc<br/>e33c19dc9bed564 bbc37c1a99c2ec3<br/>55af5dd5e323584 ba116290c6b5498<br/>ac2ae001b650fab 26527c63d8777af<br/>067bc2139c075cc e0f52a976427bbc<br/>4eed5012302c8f8 ee4cdaf00f4b77a<br/>da0d220266edc3a fb608dd428d7d51<br/>ca3bc8a309e7d2b cfdce222ac67c77<br/>64322b77650c260 e870259dc4199da<br/>fb427054e51609e 4e5a5c4caa9f4f5<br/>2b6981b19736f00 c0dbe31a8ef1b96<br/>eb56689d5897756 b4c81ba63939314<br/>dbcc1b48c1355d8 8fcacd3440944d7<br/>c3d7d1897f0e5f0 0b1c3a5bff2aa67<br/>974fb404eafb4e3 5a1693c10ddfd96<br/>aaf2bdd2e40427d ab258bae40ec73d<br/>19f0891e0b71f36 21a258e2f60bdab<br/>018ddb9ffcd36f6 5311a65d470a3ae<br/>3ee6da1aa5f841f bef51938b48707d<br/>cc6832783ef9c0e 29f2d5c871f9fb8<br/>054b09976a35603 b963406eda7690d<br/>260ffba4d96c282 f0085e25c5d9171<br/>1f02617ae544131 00c3fba909c9549<br/>9a24a3219124f1a d35cfa46355bddf<br/>8d0059f826c8168 74b53ace31b8b20<br/>6d10c3b96ded0d8 0d99a2469054274<br/>c981da9d1477744 30c29ccfdbd1bca<br/>76ceb7a903dd81b 1f844d8394e0840<br/>ca88f1b2a893986 e28c307a5dc0c90<br/>a5a2b9529167f5c ab88a37980f2751<br/>8778c10b1945893 99e868767ee5688<br/>213a09b152f7f20 05eea00fdb4b023<br/>784be863af27223 291dc54b8e2385c<br/>a2ea48803e17c75 51cd789bece27ff<br/>f58cb88381fe805 b737ab187a0b92e<br/>f1be896d738e9c9 988ac15f95a7353<br/>dd7028a96c6c893 5373012e68070a0<br/>bdb4b92ac73c404 d791f9978edce4b<br/>2af25600edb3a63 7d5fb458358bf58<br/>a86c82ccc87722a 0a6cf50a05cfcc4<br/>1b24a64f6746545 8477f4ea2a5194e<br/>e41a2a21c0cd35b c6816bbaac28aa9<br/>cf3e590c74a8a50 ee2eef8e9458189<br/>58bcd98e2fa629a efddf34c09ded63<br/>f871a6b27313e22 9d50696b08da49d<br/>960f044b59f1982 c155252f75d1435<br/>879b8ce2eaf67cb d38ee8680a591db<br/>d3a25028e2f8bdf c5077f3a2ed15ae<br/>d894391b9a34d7f 9e56c279d0d60fb<br/>06256ccaa6647c5 9a089e8d9335802<br/>a47bb55f7d786ce 357af17aaefbd04<br/>841945253dcb848 e322e6311a5d235<br/>1eb740bad5d51c7 116246fbff35617<br/>bf408aac6a94cb1 6478d025661d44c<br/>4b4177bf6c65116 f6c34f6151ab0ee<br/>5cb6aade3be521e 61336e189b466c5<br/>dd660604162c1e0 22635bfe89dc4fa<br/>2779d4d94b69d53 4537b6a50c62155<br/>11c7ead3b560af8 b4c5b03ac649996<br/>9ce6c068247befa 3fb72cc4d79fc8c<br/>c437d65da639172 213f2849c3dda8f<br/>aae86b7f9c8fce5 c3fa21904f599ca<br/>9a718f27c7d42e0 5e377f01cb47afc<br/>cc5be28f0dad2a6 fe903ccb5a43508<br/>fb88ffa67a3b389 d056775485a9768<br/>cb4bbab25e8e8b9 68d839abecc94c0<br/>0db0376307ba5b8 3cf4db3c10c05e2<br/>e82af740a9d0636 411c9ca0609e1bf<br/>373e91b256587ab 8036d656d137d6d<br/>1f41f43083d783b 5f8934ce7541ba1<br/>039c4da730fca43 bba7120c6b4e0ef<br/>181a8a3ff02597b a32b95e3f00fb08<br/>29ab5271a143eae bc98d131b953142<br/>db97de914a435f0 f1873110e561631<br/>9302fc9df8edd9a 26c7fe4bef10e52<br/>29d8627bd2e8ab7 7418c86705ca71b<br/>c1f92114aecdd8e 5a446a50e54092e<br/>67ddba0a6344e11 470331c24b68041<br/>cc9b4a6b606cb06 604ebd051b26e61<br/>d0e949bca0728c6 18d970a86d53f84<br/>294c6eb453ebb13 d11289ba425db9c<br/>ea1c85520ff60d5 c8c0924b2959342<br/>1993ed1faab3d13 b43846c0074f896<br/>4ff12779d294241 be25e2c322411d5<br/>ed02793a7711e9f 9126bbbf30463ab<br/>af7d32381a4d692 6eb6551b575a5d1<br/>096bf7b179c6fd1 0268e213d4fe774<br/>dc70aef20e7eb6d 4e48d4cd1a39a1c<br/>b55ef12918f43a4 5efa731a20736c9<br/>2789af2fcd765bb e41ec469ee0c680<br/>85e7990d2e693fb 5e213e3d67ea6d6<br/>522b4c184268ce0 62f3de91efe7600<br/>0d2a7f40691ad9f 69bc55265781e70<br/>907abd528ddea93 7c5d7e7a794450e<br/>5dbdbbba09db3fc 507e0d6201eabf7<br/>e1b391d278ad62d 0dcbfcab2ecb024<br/>24b4a446960d31f e78b37fb8284b12<br/>08209e1a8cf01a9 7fb628dcf227c32<br/>447f89cce4f4291 a67396a2f8cc262<br/>221f6de199aca86 3a9bbb376d0ab7b<br/>be738cbccee3819 3324a2971f6bfdb<br/>396cc03af61ebff e64e3b05a7aecda<br/>55f83999362cd25 e7b34784a78af6c<br/>9fe3e1ef5acbfa7 ac97c4233d442e1<br/>fd7983dadb71cdd 084c7c9115afe0e<br/>b63395e25efcdd2 0adaef5dab13234<br/>668e787a3c5e566 3feae07a48e11d7<br/>d07019c0028b28e e0439050869e183<br/>8d9d82253695cdd 2661dd55dc73794<br/>fad8905ec4a04e1 d76cd7b57f3df06<br/>bbad9641b01dd72 86f46293b2b67b4<br/>067e04a2c479a48 8b69391cd6b4808<br/>2042dcdf4b844c1 08767fb439d1873<br/>88a98119c2defca 7d64e30ffa196b8<br/>1a34d10eed0eed6 c70c5a3a592bf3f<br/>490ad60a308629e 2e61633ee89a7d4<br/>57d13e565020383 eaf8534dddcde82<br/>843f058a2268f04 9c749b98639c8ca<br/>a980ccf73abe932 3a8dd86abaeb773<br/>869d507f86ebbff 78c9e1c215faaf9<br/>a6c7fefe783f882 f392a3ec500196a<br/>2f8827c2a3d9e83 f6148ba420cb1f1<br/>e4a782849be3612 d3897e061824ce8<br/>d1a807cc4408b3c aa7414b9319694b<br/>6a56296cd9aaab1 c17bf3319012960<br/>4c3d3c26fb941a8 c4bc2caa7870928<br/>34e91ff8733bb88 0bde9d13e7881d1<br/>aee5c1ab6d2e213 33e246f9b05bb7f<br/>c68bb01d26c5786 65a10cef5586a95<br/>32a5d6f2847623d a01ce9ef3053bdc<br/>bf21fba235ef560 1fe79d708a8f54f<br/>643232de7902c74 407c4b2989a1ab6<br/>b781d5f6cc819a3 8d0bc7bdb3e76c2<br/>54fa90f9b754b3b 870d4cd1e41c2f5<br/>4deed47aace9cea 8b3fb813bd008f6<br/>d071f0b0affb9ce 1050296d01eaf5e<br/>ea0e2b367f4df60 a0c8393c752590f<br/>959065f2174112d 90845c766e73d37<br/>a7d0e8d0e6831ec a241d0484214c0a<br/>40decc8d83c2bc0 7edf9979308c1ab<br/>5f954122f024b46 cdc1ea8f7a9834d<br/>4f08416c3333c7e 3edcab9e6739269<br/>ac2df9598ea7335 1ee5fe30a430526<br/>a667b925c6b5af4 9daf6327b72cb41<br/>babdbd2940ae267 c02539047aedeb9<br/>947755e92c040fc 31492d6a9a498fb<br/>cf9012ee86a023b 4d0bdb4de33513f",
"GREP(1)                   BSD General Commands Manual                  GREP(1)<br/><br/>NAME<br/>     grep, egrep, fgrep, zgrep, zegrep, zfgrep -- file pattern searcher<br/><br/>SYNOPSIS<br/>     grep [-abcdDEFGHhIiJLlmnOopqRSsUVvwxZ] [-A num] [-B num] [-C[num]]<br/>          [-e pattern] [-f file] [--binary-files=value] [--color[=when]]<br/>          [--colour[=when]] [--context[=num]] [--label] [--line-buffered]<br/>          [--null] [pattern] [file ...]<br/><br/>DESCRIPTION<br/>     The grep utility searches any given input files, selecting lines that<br/>     match one or more patterns.  By default, a pattern matches an input line<br/>     if the regular expression (RE) in the pattern matches the input line<br/>     without its trailing newline.  An empty expression matches every line.<br/>     Each input line that matches at least one of the patterns is written to<br/>     the standard output.<br/><br/>     grep is used for simple patterns and basic regular expressions (BREs);<br/>     egrep can handle extended regular expressions (EREs).  See re_format(7)<br/>     for more information on regular expressions.  fgrep is quicker than both<br/>     grep and egrep, but can only handle fixed patterns (i.e. it does not<br/>     interpret regular expressions).  Patterns may consist of one or more<br/>     lines, allowing any of the pattern lines to match a portion of the input.<br/><br/>     zgrep, zegrep, and zfgrep act like grep, egrep, and fgrep, respectively,<br/>     but accept input files compressed with the compress(1) or gzip(1) com-<br/>     pression utilities.<br/><br/>     The following options are available:<br/><br/>     -A num, --after-context=num<br/>             Print num lines of trailing context after each match.  See also<br/>             the -B and -C options.<br/><br/>     -a, --text<br/>             Treat all files as ASCII text.  Normally grep will simply print<br/>             ``Binary file ... matches'' if files contain binary characters.<br/>             Use of this option forces grep to output lines matching the spec-<br/>             ified pattern.<br/><br/>     -B num, --before-context=num<br/>             Print num lines of leading context before each match.  See also<br/>             the -A and -C options.<br/><br/>     -b, --byte-offset<br/>             The offset in bytes of a matched pattern is displayed in front of<br/>             the respective matched line.<br/><br/>     -C[num, --context=num]<br/>             Print num lines of leading and trailing context surrounding each<br/>             match.  The default is 2 and is equivalent to -A 2 -B 2.  Note:<br/>             no whitespace may be given between the option and its argument.<br/><br/>     -c, --count<br/>             Only a count of selected lines is written to standard output.<br/><br/>     --colour=[when, --color=[when]]<br/>             Mark up the matching text with the expression stored in<br/>             GREP_COLOR environment variable.  The possible values of when can<br/>             be `never', `always' or `auto'.<br/><br/>     -D action, --devices=action<br/>             Specify the demanded action for devices, FIFOs and sockets.  The<br/>             default action is `read', which means, that they are read as if<br/>             they were normal files.  If the action is set to `skip', devices<br/>             will be silently skipped.<br/><br/>     -d action, --directories=action<br/>             Specify the demanded action for directories.  It is `read' by<br/>             default, which means that the directories are read in the same<br/>             manner as normal files.  Other possible values are `skip' to<br/>             silently ignore the directories, and `recurse' to read them<br/>             recursively, which has the same effect as the -R and -r option.<br/><br/>     -E, --extended-regexp<br/>             Interpret pattern as an extended regular expression (i.e. force<br/>             grep to behave as egrep).<br/><br/>     -e pattern, --regexp=pattern<br/>             Specify a pattern used during the search of the input: an input<br/>             line is selected if it matches any of the specified patterns.<br/>             This option is most useful when multiple -e options are used to<br/>             specify multiple patterns, or when a pattern begins with a dash<br/>             (`-').<br/><br/>     --exclude<br/>             If specified, it excludes files matching the given filename pat-<br/>             tern from the search.  Note that --exclude patterns take priority<br/>             over --include patterns, and if no --include pattern is speci-<br/>             fied, all files are searched that are not excluded.  Patterns are<br/>             matched to the full path specified, not only to the filename com-<br/>             ponent.<br/><br/>     --exclude-dir<br/>             If -R is specified, it excludes directories matching the given<br/>             filename pattern from the search.  Note that --exclude-dir pat-<br/>             terns take priority over --include-dir patterns, and if no<br/>             --include-dir pattern is specified, all directories are searched<br/>             that are not excluded.<br/><br/>     -F, --fixed-strings<br/>             Interpret pattern as a set of fixed strings (i.e. force grep to<br/>             behave as fgrep).<br/><br/>     -f file, --file=file<br/>             Read one or more newline separated patterns from file.  Empty<br/>             pattern lines match every input line.  Newlines are not consid-<br/>             ered part of a pattern.  If file is empty, nothing is matched.<br/><br/>     -G, --basic-regexp<br/>             Interpret pattern as a basic regular expression (i.e. force grep<br/>             to behave as traditional grep).<br/><br/>     -H      Always print filename headers with output lines.<br/><br/>     -h, --no-filename<br/>             Never print filename headers (i.e. filenames) with output lines.<br/><br/>     --help  Print a brief help message.<br/><br/>     -I      Ignore binary files.  This option is equivalent to<br/>             --binary-file=without-match option.<br/><br/>     -i, --ignore-case<br/>             Perform case insensitive matching.  By default, grep is case sen-<br/>             sitive.<br/><br/>     --include<br/>             If specified, only files matching the given filename pattern are<br/>             searched.  Note that --exclude patterns take priority over<br/>             --include patterns.  Patterns are matched to the full path speci-<br/>             fied, not only to the filename component.<br/><br/>     --include-dir<br/>             If -R is specified, only directories matching the given filename<br/>             pattern are searched.  Note that --exclude-dir patterns take pri-<br/>             ority over --include-dir patterns.<br/><br/>     -J, --bz2decompress<br/>             Decompress the bzip2(1) compressed file before looking for the<br/>             text.<br/><br/>     -L, --files-without-match<br/>             Only the names of files not containing selected lines are written<br/>             to standard output.  Pathnames are listed once per file searched.<br/>             If the standard input is searched, the string ``(standard<br/>             input)'' is written.<br/><br/>     -l, --files-with-matches<br/>             Only the names of files containing selected lines are written to<br/>             standard output.  grep will only search a file until a match has<br/>             been found, making searches potentially less expensive.  Path-<br/>             names are listed once per file searched.  If the standard input<br/>             is searched, the string ``(standard input)'' is written.<br/><br/>     --mmap  Use mmap(2) instead of read(2) to read input, which can result in<br/>             better performance under some circumstances but can cause unde-<br/>             fined behaviour.<br/><br/>     -m num, --max-count=num<br/>             Stop reading the file after num matches.<br/><br/>     -n, --line-number<br/>             Each output line is preceded by its relative line number in the<br/>             file, starting at line 1.  The line number counter is reset for<br/>             each file processed.  This option is ignored if -c, -L, -l, or -q<br/>             is specified.<br/><br/>     --null  Prints a zero-byte after the file name.<br/><br/>     -O      If -R is specified, follow symbolic links only if they were<br/>             explicitly listed on the command line.  The default is not to<br/>             follow symbolic links.<br/><br/>     -o, --only-matching<br/>             Prints only the matching part of the lines.<br/><br/>     -p      If -R is specified, no symbolic links are followed.  This is the<br/>             default.<br/><br/>     -q, --quiet, --silent<br/>             Quiet mode: suppress normal output.  grep will only search a file<br/>             until a match has been found, making searches potentially less<br/>             expensive.<br/><br/>     -R, -r, --recursive<br/>             Recursively search subdirectories listed.<br/><br/>     -S      If -R is specified, all symbolic links are followed.  The default<br/>             is not to follow symbolic links.<br/><br/>     -s, --no-messages<br/>             Silent mode.  Nonexistent and unreadable files are ignored (i.e.<br/>             their error messages are suppressed).<br/><br/>     -U, --binary<br/>             Search binary files, but do not attempt to print them.<br/><br/>     -V, --version<br/>             Display version information and exit.<br/><br/>     -v, --invert-match<br/>             Selected lines are those not matching any of the specified pat-<br/>             terns.<br/><br/>     -w, --word-regexp<br/>             The expression is searched for as a word (as if surrounded by<br/>             `[[:<:]]' and `[[:>:]]'; see re_format(7)).<br/><br/>     -x, --line-regexp<br/>             Only input lines selected against an entire fixed string or regu-<br/>             lar expression are considered to be matching lines.<br/><br/>     -y      Equivalent to -i.  Obsoleted.<br/><br/>     -Z, -z, --decompress<br/>             Force grep to behave as zgrep.<br/><br/>     --binary-files=value<br/>             Controls searching and printing of binary files.  Options are<br/>             binary, the default: search binary files but do not print them;<br/>             without-match: do not search binary files; and text: treat all<br/>             files as text.<br/><br/>     --context[=num]<br/>             Print num lines of leading and trailing context.  The default is<br/>             2.<br/><br/>     --line-buffered<br/>             Force output to be line buffered.  By default, output is line<br/>             buffered when standard output is a terminal and block buffered<br/>             otherwise.<br/><br/>     If no file arguments are specified, the standard input is used.<br/><br/>EXIT STATUS<br/>     The grep utility exits with one of the following values:<br/><br/>     0     One or more lines were selected.<br/>     1     No lines were selected.<br/>     >1    An error occurred.<br/><br/>EXAMPLES<br/>     To find all occurrences of the word `patricia' in a file:<br/><br/>           $ grep 'patricia' myfile<br/><br/>     To find all occurrences of the pattern `.Pp' at the beginning of a line:<br/><br/>           $ grep '^.Pp' myfile<br/><br/>     The apostrophes ensure the entire expression is evaluated by grep instead<br/>     of by the user's shell.  The caret `^' matches the null string at the<br/>     beginning of a line, and the `\' escapes the `.', which would otherwise<br/>     match any character.<br/><br/>     To find all lines in a file which do not contain the words `foo' or<br/>     `bar':<br/><br/>           $ grep -v -e 'foo' -e 'bar' myfile<br/><br/>     A simple example of an extended regular expression:<br/><br/>           $ egrep '19|20|25' calendar<br/><br/>     Peruses the file `calendar' looking for either 19, 20, or 25.<br/><br/>SEE ALSO<br/>     ed(1), ex(1), gzip(1), sed(1), re_format(7)<br/><br/>STANDARDS<br/>     The grep utility is compliant with the IEEE Std 1003.1-2008 (``POSIX.1'')<br/>     specification.<br/><br/>     The flags [-AaBbCDdGHhIJLmoPRSUVwZ] are extensions to that specification,<br/>     and the behaviour of the -f flag when used with an empty pattern file is<br/>     left undefined.<br/><br/>     All long options are provided for compatibility with GNU versions of this<br/>     utility.<br/><br/>     Historic versions of the grep utility also supported the flags [-ruy].<br/>     This implementation supports those options; however, their use is<br/>     strongly discouraged.<br/><br/>HISTORY<br/>     The grep command first appeared in Version 6 AT&T UNIX.<br/><br/>BSD                              July 28, 2010                             BSD"
];


var tagBody = '(?:[^"\'>]|"[^"]*"|\'[^\']*\')*';

var tagOrComment = new RegExp(
    '<(?:' +
     '!--(?:(?:-*[^->])*--+|-?)' +
     '|script\\b' + tagBody + '>[\\s\\S]*?</script\\s*' +
     '|style\\b' + tagBody + '>[\\s\\S]*?</style\\s*' +
     '|/?[a-z]' +
     tagBody +
     ')>',
    'gi');
function removeTags(html) {
  var oldHtml;
  do {
    oldHtml = html;
    html = html.replace(tagOrComment, '');
  } while (html !== oldHtml);
  return html.replace(/</g, '&lt;');
}